%section{ "ng-app" => 'shirtsApp', 'ng-controller' => 'ShirtsCtrl' }
  .container.main
    = form_for [:admin, @shirt], html: { multipart: true, id: 'shirt-form' } do |f|
      .alert.error{ 'ng-show' => 'errors.general'} {{ errors.general }}
      %spin{ 'spin-on' => 'saving', 'dim' => '.input-container', 'center' => '' }
      .input-container
        .image-preview
          .input
            %label Choose design image
            = f.file_field :design, 'image-preview' => '', 'target' => '#preview', 'hide' => '.default-shirt'
            %button.button.upload-button{ 'eat-click' => '' } Choose Design
            .preview
              %img#preview{ 'ng-src' => '{{ shirt.design }}', 'ng-show' => 'shirt.design' }
              %i.icon-tshirt.default-shirt.default-preview{ 'ng-hide' => 'shirt.design' }
        .input
          %label
            Name
            %span.required *
          %input.short{ type: 'text', id: 'name', 'ng-model' => 'shirt.name', 'ng-class' => '{ error: errors.name }' }
          .alert.error{ 'ng-show' => 'errors.name' }
            %button.close{ 'hide-alert' => 'errors.name = ""', 'eat-click' => '' } &times;
            {{ errors.name }}
        .input
          %label
            Price
            %span.required *
          %input.short{ type: 'text', id: 'price', 'ng-model' => 'shirt.price', 'ng-class' => '{ error: errors.price }' }
          .alert.error{ 'ng-show' => 'errors.price' }
            %button.close{ 'hide-alert' => 'errors.price = ""', 'eat-click' => '' } &times;
            {{ errors.price }}
        .input.stock
          %label.checkbox In Stock
          %i.icon-circleselection{ 'ng-hide' => 'shirt.stock', 'ng-click' => 'shirt.stock = true' }
          %i.icon-circleselect{ 'ng-show' => 'shirt.stock', 'ng-click' => 'shirt.stock = false' }
        .angular-controller{ 'ng-controller' => 'ColorsCtrl', 'ng-init' => 'setColorType("shirt")' }
          .input
            %label
              Shirt Colors
              %span.required *
            .alert.error.short{ 'ng-show' => 'errors.shirt_colors' }
              %button.close{ 'hide-alert' => 'errors.shirt_colors = ""', 'eat-click' => '' } &times;
              {{ errors.shirt_colors }}
            .colors
              .color-box
                .color{ 'ng-repeat' => 'color in colors', 'ng-class' => '{ selected: shirt_has_color(color) }', 'ng-click' => 'toggle_shirt_color(color)' }
                  %div{ 'ng-style' => '{"background-color": format_color(color.hex_value)}' }
            = link_to '', 'ng-show' => '!is_editing_color', 'ng-click' => 'is_editing_color = true' do
              %i.icon-plus
              Offer new shirt color

          .input.keep-margin.clearfix{ 'ng-show' => 'is_editing_color' }
            %h5 Please enter the color HEX value (e.g. #CCC)
            %input.color-input.short#shirt-color{ type: 'text', 'ng-model' => 'new_color_value', 'ng-class' => '{ error: color_errors.hex_value }' }
            .colors.no-margin
              .color.color-preview
                %div{ 'ng-style' => '{"background-color": format_color(new_color_value)}' }
            .alert.error{ 'ng-show' => '!is_valid()' }
              %button.close{ 'hide-alert' => 'reset_errors()', 'eat-click' => '' } &times;
              {{ full_error_messages() }}
            = link_to 'Save color', '', class: 'button save', 'ng-click' => 'save_color("shirt")'

        .angular-controller{ 'ng-controller' => 'ColorsCtrl', 'ng-init' => 'setColorType("text")' }
          .input
            %label
              Text Colors
              %span.required *
            .alert.error.short{ 'ng-show' => 'errors.text_colors' }
              %button.close{ 'hide-alert' => 'errors.text_colors = ""', 'eat-click' => true } &times;
              {{ errors.text_colors }}
            .colors
              .color-box
                .color{ 'ng-repeat' => 'color in colors', 'ng-class' => '{ selected: shirt_has_text_color(color) }', 'ng-click' => 'toggle_text_color(color)' }
                  %div{ 'ng-style' => '{"background-color": format_color(color.hex_value)}' }
            = link_to '', 'ng-show' => '!is_editing_color', 'ng-click' => 'is_editing_color = true' do
              %i.icon-plus
              Offer new text color

          .input.keep-margin.clearfix{ 'ng-show' => 'is_editing_color' }
            %h5 Please enter the color HEX value(e.g. #CCC)
            %input.color-input.short#text-color{ type: 'text', 'ng-model' => 'new_color_value', 'ng-class' => '{ error: color_errors.hex_value }' }
            .colors.no-margin
              .color.color-preview
                %div{ 'ng-style' => '{ "background-color": format_color(new_color_value) }' }
            .alert.error{ 'ng-show' => '!is_valid()' }
              %button.close{ 'hide-alert' => 'reset_errors()', 'eat-click' => true } &times;
              {{ full_error_messages() }}
            = link_to 'Save color', '', class: 'button save', 'ng-click' => 'save_color("text")'

        .angular-controller{ 'ng-controller' => 'SizesCtrl' }
          .input
            %label
              Sizes
              %span.required *
            .alert.error.short{ 'ng-show' => 'errors.sizes' }
              %button.close{ 'hide-alert' => 'errors.sizes = ""', 'eat-click' => '' } &times;
              {{ errors.sizes }}
            .sizes
              %span{ 'ng-repeat' => 'size in sizes', 'ng-class' => '{ selected: shirt_has_size(size)}', 'ng-click' => 'toggle_size(size)' }
                {{ size.size }}
            = link_to '' , 'ng-show' => '!is_editing_size', 'ng-click' => 'is_editing_size = true' do
              %i.icon-plus
              Offer new size

          .input.clearfix{ 'ng-show' => 'is_editing_size' }
            %h5 Please enter the size (e.g. XL )
            %input.extra-short{ type: 'text', id: 'color', 'ng-model' => 'new_size', 'ng-class' => '{ error: !is_valid() }' }
            = link_to 'Save size', '', class: 'button', 'ng-click' => 'save_size()'
            .alert.error.short{ 'ng-show' => '!is_valid()' }
              %button.close{ 'hide-alert' => 'reset_errors()', 'eat-click' => '' } &times;
              {{ full_error_messages() }}

        = f.hidden_field :name, 'hidden-value' => 'shirt.name'
        = f.hidden_field :price, 'hidden-value' => 'shirt.price'
        = f.hidden_field :stock, 'hidden-value' => 'shirt.stock'
        = hidden_field_tag :shirt_colors, '', 'hidden-value' => 'shirt.shirt_colors'
        = hidden_field_tag :text_colors, '', 'hidden-value' => 'shirt.text_colors'
        = hidden_field_tag :sizes, '', 'hidden-value' => 'shirt.sizes'

      .submit
        = link_to 'Cancel', request.referer, class: 'button grey'
        = link_to 'Save shirt', '', class: 'button pull-right', 'submit-form' => '#shirt-form', 'valid' => 'is_valid()', 'saving' => 'saving'
        - if action.eql? 'edit'
          = link_to 'Delete', '', class: 'button red pull-right', 'ng-click' => 'delete(shirt, redirect_callback)'

:javascript
  $(document).ready(function() {
    AngularDataSeed({
      shirt: #{render partial: 'shirts/shirt', locals: { shirt: @shirt, shirt_design: :large }, formats: [:json]},
      shirtColors: #{render partial: 'colors/colors', locals: { colors: @shirt_colors }, formats: [:json]},
      textColors: #{render partial: 'colors/colors', locals: { colors: @text_colors }, formats: [:json]},
      sizes: #{render partial: 'sizes/sizes', locals: { sizes: @sizes }, formats: [:json]},
      dependencies: { authenticity_token: '#{form_authenticity_token}' }
    });
  })